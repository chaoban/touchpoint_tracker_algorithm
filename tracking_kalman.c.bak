#include "tp_system.h"

extern float sin(float x);
//extern float cosf(float x);

#define UNREFERENCED_PARAMETER(p) (p)

void ExtendedKalmanFilter( int cont, int ID );	// Extended Kalman Filter
GLOBAL Global;

float st_x[Kalman_Touch_num][4][1];
float st_y[Kalman_Touch_num][4][1];

static float fram_x[Kalman_Touch_num][2];
static float fram_y[Kalman_Touch_num][2];

static float det_x[Kalman_Touch_num] = { 0 } ;
static float det_y[Kalman_Touch_num] = { 0 } ;

static int fram_cnt[Kalman_Touch_num] = { 0 };
static int Initial[Kalman_Touch_num] = { 0 };

static int CH_cnt[CHANNEL_NUM] = { 0 };
static int CH_cnt_v2[CHANNEL_NUM] = { 0 };

KalmanTemp kalman[Kalman_Touch_num];

// ChannelSmooth
//ChannelKalman Channel_kalman[CHANNEL_NUM];
//ChannelKalman_dim2 Channel_kalman_dim2[CHANNEL_NUM];

static float kalman_ch_A[2][2] = 
			{
				{1,	1},
                {0,	1} 
            } ;
static float kalman_ch_AT[2][2] = 
			{
				{1,	0},		
                {1,	1} 
            } ;

static float kalman_ch_H[2]={1, 1} ;
static float I[2][2]=
			{
				{1, 0},
                {0, 1}
            };

static float CH_var[CHANNEL_NUM] = { 0 };
static float Rowframe[2][CHANNEL_NUM] = { 0 };
static int Rowframe_cnt = 1;
static int Rowframe_temp_cnt = 0;

// Movementvar
MovementTemp MovementVar[TABLEFRAMSIZE];

static int MovementIDcnt[TABLEFRAMSIZE] = { 0 };
static int MovementIDcnttemp[TABLEFRAMSIZE] = { 0 };
static float smoothtapnum_x[TABLEFRAMSIZE][TABLEFRAMSIZE] = { 0 };
static float smoothtapnum_y[TABLEFRAMSIZE][TABLEFRAMSIZE] = { 0 };
static int   smoothtapnumcnt[TABLEFRAMSIZE] = { 0 };
static int   smoothtapnumtempcnt[TABLEFRAMSIZE] = { 0 };


void Meansmooth( float *TP, int ID, int Clear )
{
	int i = 0 ;
	float temp[2] = {0};

	if(_FALSE == Clear)
	{
	
		if( Global.smoothtapnum > smoothtapnumcnt[ID] )
		{
			if( smoothtapnumcnt[ID] < Global.smoothtapnum/2 )
			{
				smoothtapnum_x[ID][ smoothtapnumcnt[ID] ]= TP[ X_Decision ];
				smoothtapnum_y[ID][ smoothtapnumcnt[ID] ]= TP[ Y_Decision ];

				smoothtapnumcnt[ID]++;

				TP[ X_Decision ] = smoothtapnum_x[ID][ 1 ];
				TP[ Y_Decision ] = smoothtapnum_y[ID][ 1 ];
			
			}
			else
			{
				smoothtapnum_x[ID][ smoothtapnumcnt[ID] ]= TP[0];
				smoothtapnum_y[ID][ smoothtapnumcnt[ID] ]= TP[1];

				TP[ X_Decision ] = smoothtapnum_x[ID][ smoothtapnumcnt[ID] - Global.smoothtapnum/2 ];
				TP[ Y_Decision ] = smoothtapnum_y[ID][ smoothtapnumcnt[ID] - Global.smoothtapnum/2 ];

				smoothtapnumcnt[ID]++;
			}
		}
		else
		{
			smoothtapnum_x[ID][ smoothtapnumtempcnt[ID] ]= TP[0];
			smoothtapnum_y[ID][ smoothtapnumtempcnt[ID] ]= TP[1];

			smoothtapnumtempcnt[ID]++;

			if( Global.smoothtapnum == smoothtapnumtempcnt[ID] )
				smoothtapnumtempcnt[ID]=0;

			for (i = 0; i < Global.smoothtapnum; i++) 
			{
				temp[ X_Decision ] += smoothtapnum_x[ID][ i ];
				temp[ Y_Decision ] += smoothtapnum_y[ID][ i ];
			}

			TP[0]=temp[ X_Decision ] / (float)Global.smoothtapnum;
			TP[0]=temp[ Y_Decision ] / (float)Global.smoothtapnum;
		}
	}
	else
	{
		smoothtapnumcnt[ID] = 0;
		smoothtapnumtempcnt[ID] = 0;
	}
}

void Adaptive_tracking( float *TP, int ID, int Type, float Kalman_R )
{
	int i = 0, j = 0;
	UNREFERENCED_PARAMETER( Kalman_R );

	if ( Type == POINT_BIRTH )	// Birth
	{
		if ( Initial[ID] == 0 )
		{
			// Initial K_x & K_y
			for ( i = 0 ; i < 4 ; i++ )
			{
				kalman[ID].K_x[i][0] = 0;
				kalman[ID].K_y[i][0] = 0;
			}

			// Initial P_x & P_y
			for ( i = 0 ; i < 4 ; i++ )
			{
				for ( j = 0 ; j < 4 ; j++ )
					if ( i == j )
					{
						kalman[ID].P_x[i][j] = Global.Kalman_P;
						kalman[ID].P_y[i][j] = Global.Kalman_P;
					}
					else
					{ 
						kalman[ID].P_x[i][j] = 0;
						kalman[ID].P_y[i][j] = 0;
					}
			}

			// Initial st_x & st_y
			for ( i = 0 ; i < 3 ; i++)
			{
				st_x[ID][i][0] = 0;
				st_y[ID][i][0] = 0;
			}

			st_x[ID][3][0] = (float)3.14 / (float)2;
			st_y[ID][3][0] = (float)3.14 / (float)2;
            		
            fram_cnt[ID] = 0;
			Initial[ID] = 1;
		}

		if ( fram_cnt[ID] == 0 )
		{

			fram_x[ID][fram_cnt[ID]] = TP[0];
			fram_y[ID][fram_cnt[ID]] = TP[1];

			fram_cnt[ID] = 1;

		}
	}
	else if ( Type == POINT_MOVE )	// Move
	{
		if ( fram_cnt[ID] == 1 )
		{

			fram_x[ID][fram_cnt[ID]] = TP[0];
			fram_y[ID][fram_cnt[ID]] = TP[1];

			ExtendedKalmanFilter( fram_cnt[ID], ID );


			fram_cnt[ID] = 2;

		}
		else if ( fram_cnt[ID] == 2 )
		{

			fram_x[ID][fram_cnt[ID] - 2] = fram_x[ID][fram_cnt[ID] - 1];
			fram_y[ID][fram_cnt[ID] - 2] = fram_y[ID][fram_cnt[ID] - 1];
			fram_x[ID][fram_cnt[ID] - 1] = TP[0];
			fram_y[ID][fram_cnt[ID] - 1] = TP[1];

			ExtendedKalmanFilter( fram_cnt[ID], ID );


			TP[0] = st_x[ID][0][0];
			TP[1] = st_y[ID][0][0];
		}
        
        Initial[ID] = 0;
	}
	else if ( Type == POINT_DEATH )	// Death
	{		
		
		fram_x[ID][fram_cnt[ID] - 2] = fram_x[ID][fram_cnt[ID] - 1];
		fram_y[ID][fram_cnt[ID] - 2] = fram_y[ID][fram_cnt[ID] - 1];
		fram_x[ID][fram_cnt[ID] - 1] = TP[0];
		fram_y[ID][fram_cnt[ID] - 1] = TP[1];
		
		ExtendedKalmanFilter( fram_cnt[ID], ID );
		
		
		TP[0] = st_x[ID][0][0];
		TP[1] = st_y[ID][0][0];
		// Reset
		fram_cnt[ID] = 0;
		Initial[ID] = 0;
		for ( i = 0 ; i < 3 ; i++)
		{
			st_x[ID][i][0] = 0;
			st_y[ID][i][0] = 0;
		}

		st_x[ID][3][0] = (float)3.14 / (float)2;
		st_y[ID][3][0] = (float)3.14 / (float)2;

	}
}

void ExtendedKalmanFilter( int cont, int ID )	// Extended Kalman Filter
{
	// Temp Parameter
	int i = 0, j = 0, k = 0, l = 0;
	int ss;
	float tmp1, tmp2;
	float C[4][4] = { 0 }, D[4][4] = { 0 }, E[4][4] = { 0 }, F[4][4] = { 0 };
	
	// Kalman Parameter
	float Kalman_H[1][4];
	float Kalman_HT[4][1];
	float Kalman_I[4][4];
	
	float Kalman_V_x, Kalman_V_y;
	float Kalman_S_x, Kalman_S_y;

	float measrue_x = 0, measrue_y = 0;

	float w_x = st_x[ID][3][0];
	float w_y = st_y[ID][3][0];


	float Kalman_A[4][4] = 
	{
		1,		1,		0.5,	0,
		0,		1,		1,		0,
		0,		0,		1,		0,
		0,		0,		0,		1
	};

	float Kalman_A_x[4][4] = 
	{
		1,	0,	0.5, 0,
		0,	0,	  1, 0,
		0,	0,	  1, 0,
		0,	0,	  0, 1
	};
	
	float Kalman_A_y[4][4] = 
	{
		1,	0,	0.5, 0,
		0,	0,	  1, 0,
		0,	0,	  1, 0,
		0,	0,	  0, 1
	};

	Kalman_H[0][0] = 1;
	Kalman_H[0][1] = Global.Kalman_HV;
	Kalman_H[0][2] = Global.Kalman_HA;
	Kalman_H[0][3] = Global.Kalman_HW;
	Kalman_HT[0][0] = 1;
	Kalman_HT[1][0] = Global.Kalman_HV;
	Kalman_HT[2][0] = Global.Kalman_HA;
	Kalman_HT[3][0] = Global.Kalman_HW;
	
	Kalman_A_x[0][1] = (float)sin(w_x)/(float)w_x;
	Kalman_A_x[1][1] = (float)cos(w_x);
	
	Kalman_A_y[0][1] = (float)sin(w_y)/(float)w_y;
	Kalman_A_y[1][1] = (float)cos(w_y);
	
	



	// Matrix Dimension
	if ( Global.EKF_EN == 1 )
	{
		ss = 4;	// EKF, M = ( x , x', x'', wx)'
	}
	else
	{
		ss = 3;	// KF, M = ( x , x', x'' )'
	}


	// Indentify Matrix
	for ( i = 0 ; i < ss ; i++ )
	{
		for ( j = 0 ; j < ss ; j++ )
			if ( i == j)
				Kalman_I[i][j] = 1;
			else
				Kalman_I[i][j] = 0;
	}


	// Predict
	// M = A * M
	if ( 1 == cont )
	{
		det_x[ID] = fram_x[ID][cont] - fram_x[ID][cont-1];
		det_y[ID] = fram_y[ID][cont] - fram_y[ID][cont-1];
		for ( i = 0 ; i < ss ; i++ )
		{
			for ( j = 0 ; j < 1 ; j++ )
			{
				if ( Global.EKF_EN == 1 )
				{
					st_x[ID][i][j] = Kalman_A_x[i][j] * fram_x[ID][cont] + Kalman_A_x[i][j + 1] * det_x[ID];
					st_y[ID][i][j] = Kalman_A_y[i][j] * fram_y[ID][cont] + Kalman_A_y[i][j + 1] * det_y[ID];
				}
				else
				{
					st_x[ID][i][j] = Kalman_A[i][j] * fram_x[ID][cont] + Kalman_A[i][j + 1] * det_x[ID];
					st_y[ID][i][j] = Kalman_A[i][j] * fram_y[ID][cont] + Kalman_A[i][j + 1] * det_y[ID];				
				}
			}
		}

		measrue_x = fram_x[ID][cont];
		measrue_y = fram_y[ID][cont];

	} 
	else if ( 1 < cont )
	{
		for ( i = 0 ; i < ss ; i++)
		{
			for ( j = 0 ; j < 1 ; j++ )
			{
				C[i][j] = 0;
				E[i][j] = 0;
				for ( k = 0 ; k < ss ; k ++ )
				{	
					if ( Global.EKF_EN == 1 )
					{
						C[i][j] = C[i][j] + Kalman_A_x[i][k] * st_x[ID][k][j];
						E[i][j] = E[i][j] + Kalman_A_y[i][k] * st_y[ID][k][j];
					} 
					else
					{
						C[i][j] = C[i][j] + Kalman_A[i][k] * st_x[ID][k][j];
						E[i][j] = E[i][j] + Kalman_A[i][k] * st_y[ID][k][j];
					}
				}
				st_x[ID][i][j] = C[i][j];
				st_y[ID][i][j] = E[i][j];
			}
		}

		measrue_x = fram_x[ID][cont-1];
		measrue_y = fram_y[ID][cont-1];

	}

	// P = A * P * AT + Q
	for ( i = 0 ; i < ss ; i++ ) 
	{
		for ( j = 0 ; j < ss ; j++ ) 
		{
			C[i][j] = 0;
			E[i][j] = 0;

			for ( k = 0 ; k < ss ; k++ )
			{
				for ( l = 0 ; l < ss ; l++ ) 
					if ( Global.EKF_EN == 1 )
					{
						C[i][j] = C[i][j] + Kalman_A_x[i][k] * kalman[ID].P_x[k][l] * Kalman_A_x[j][l];
						E[i][j] = E[i][j] + Kalman_A_y[i][k] * kalman[ID].P_y[k][l] * Kalman_A_y[j][l];
					}
					else
					{
						C[i][j] = C[i][j] + Kalman_A[i][k] * kalman[ID].P_x[k][l] * Kalman_A[j][l];
						E[i][j] = E[i][j] + Kalman_A[i][k] * kalman[ID].P_y[k][l] * Kalman_A[j][l];					
					}
			}

			kalman[ID].P_x[i][j] = C[i][j] + Global.Kalman_Q;
			kalman[ID].P_y[i][j] = E[i][j] + Global.Kalman_Q;

		}
	}

	// Update
	// V = Y - H * M 
	kalman[ID].YM_x = 0;
	kalman[ID].YM_y = 0;
	for ( k = 0 ; k < ss ; k++ )
	{
		kalman[ID].YM_x = kalman[ID].YM_x + Kalman_H[0][k] * st_x[ID][k][0];
		kalman[ID].YM_y = kalman[ID].YM_y + Kalman_H[0][k] * st_y[ID][k][0];
	}

	Kalman_V_x = measrue_x - kalman[ID].YM_x;
	Kalman_V_y = measrue_y - kalman[ID].YM_y;


	// S = H * P * HT + R
	tmp1 = 0;
	tmp2 = 0;
	for ( i = 0 ; i < 1 ; i++ )
	{
		for ( j = 0 ; j < 1 ; j++ )
			for ( k = 0 ; k < ss ; k++ )
				for ( l = 0 ; l < ss ; l++ )
				{
					tmp1 = tmp1 + Kalman_H[i][k] * kalman[ID].P_x[k][l] * Kalman_HT[l][j];
					tmp2 = tmp2 + Kalman_H[i][k] * kalman[ID].P_y[k][l] * Kalman_HT[l][j];
				}
	}

	Kalman_S_x = tmp1 + Global.Kalman_R;
	Kalman_S_y = tmp2 + Global.Kalman_R;

	// K = ( P * HT ) / S
	for ( i = 0 ; i < ss ; i++ )
	{
		C[i][0] = 0;
		E[i][0] = 0;

		for ( k = 0 ; k < ss ; k++ )
		{
			C[i][0] = C[i][0] + kalman[ID].P_x[i][k] * Kalman_HT[k][0];
			E[i][0] = E[i][0] + kalman[ID].P_y[i][k] * Kalman_HT[k][0];
		}

		kalman[ID].K_x[i][0] = C[i][0] / Kalman_S_x;
		kalman[ID].K_y[i][0] = E[i][0] / Kalman_S_y;
	}

	// M = M + K * V
	for ( i = 0 ; i < ss ; i++ )
	{
		st_x[ID][i][0] = st_x[ID][i][0] + kalman[ID].K_x[i][0] * Kalman_V_x;
		st_y[ID][i][0] = st_y[ID][i][0] + kalman[ID].K_y[i][0] * Kalman_V_y;
	}

	// P = ( I - KH ) * P
	for ( i = 0 ; i < ss ; i++ )
	{
		for ( j = 0 ; j < ss ; j++ )
		{
			C[i][j] = Kalman_I[i][j] - kalman[ID].K_x[i][0] * Kalman_H[0][j];
			E[i][j] = Kalman_I[i][j] - kalman[ID].K_y[i][0] * Kalman_H[0][j];
		}
	}

	for ( i = 0 ; i < ss ; i++ ) 
	{
		for ( j = 0 ; j < ss ; j++ ) 
		{
			D[i][j] = 0;
			F[i][j] = 0;
			for ( k = 0 ; k < ss ; k++ ) 
			{
				D[i][j] = D[i][j] + C[i][k] * kalman[ID].P_x[k][j];
				F[i][j] = F[i][j] + E[i][k] * kalman[ID].P_y[k][j];
			}
		}
	}

	for ( i = 0 ; i < ss ; i++ ) 
	{
		for ( j = 0 ; j < ss; j++ ) 
		{
			kalman[ID].P_x[i][j] = D[i][j];
			kalman[ID].P_y[i][j] = F[i][j];
		}
	}

}
